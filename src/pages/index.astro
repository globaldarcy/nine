---
import Layout from "../layouts/Layout.astro";
import NinebotHeader from "../components/n/ninebot-header.astro";
import NinebotSubNav from "../components/n/ninebot-sub-nav.astro";
import NinebotKV from "../components/n/ninebot-kv.astro";
import NinebotNew from "../components/n/ninebot-new.astro";
import NinebotCity from "../components/n/ninebot-city.astro";
import NinebotFun from "../components/n/ninebot-fun.astro";
import NinebotAbout from "../components/n/ninebot-about.astro";
import NinebotExplore from "../components/n/ninebot-explore.astro";
import NinebotFooter from "../components/n/ninebot-footer.astro";
---

<Layout title="Welcome to Astro.">
    <main class="ninebot">
        <NinebotHeader />
        <div class="content">
            <NinebotSubNav />
            <NinebotKV />
            <NinebotNew />
            <NinebotCity />
            <NinebotFun />
            <NinebotAbout />
            <NinebotExplore />
        </div>
        <NinebotFooter />
    </main>
</Layout>

<style lang="scss">
    main {
    }
</style>

<script>
    import axios from "axios";
    // 创建 Intersection Observer
    var observer = new IntersectionObserver(function (entries, observer) {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                // 元素进入视口，加载内容
                // entry.target.style.opacity = 1;
                observer.unobserve(entry.target);
            }
        });
    });

    // 监听 main 元素
    var main = document.querySelector(".content");
    observer.observe(main);

    let isPending = true;
    let targetNode;
    let page;
    let controller = new AbortController();

    async function getPage() {
        try {
            const response = await axios.get("/main", {
                signal: controller.signal,
            });
            isPending = false;
            return response.data;
        } catch (error) {
            isPending = false;
            // console.error(error);
        }
    }

    function setHtml() {
        page.then((data) => {
            if (typeof data === "undefined") {
                return false;
            }
            const parser = new DOMParser();
            const htmlDocument = parser.parseFromString(data, "text/html");

            // 获取指定的 DOM 节点
            targetNode = htmlDocument.querySelector(".content-segway");

            // 对节点的内容进行预加载
            targetNode.querySelectorAll("img").forEach((item) => {
                const preloadImage = new Image();
                preloadImage.src = item.src;
            });
            const currentNode = document.querySelector(".content");
            if (document.querySelector(".content") == null) {
                return false;
            }
            currentNode.parentNode.replaceChild(targetNode, currentNode);
            if (window.initExpSwiper != undefined) {
                window.initExpSwiper();
            }
        });
    }

    window.addEventListener("load", function () {
        page = getPage();
    });

    const siteS = document.querySelector(".logo-s");
    const siteN = document.querySelector(".logo-n");
    const currentNode = document.querySelector(".content");
    siteS.addEventListener("click", function () {
        if (isPending) {
            controller.abort();
            if (controller.signal.aborted) {
                controller = new AbortController();
                page = getPage();
                setHtml();
            }
        } else {
            setHtml();
        }
    });
    siteN.addEventListener("click", function () {
        targetNode = document.querySelector(".content-segway");
        if (document.querySelector(".content-segway") == null) {
            return false;
        }
        targetNode.parentNode.replaceChild(currentNode, targetNode);
    });
</script>
